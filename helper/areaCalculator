/* 
  Contains Scrips relating to calculating the area size
*/

// Calculates the area of a given geometry object and prints it to the console
// Input: region in the form of a geometry object
// Output: printed area of provided region in KM^2
// Return: null
exports.calculateAreaOfRegion = function (region, text) {
  var unit = "km^2";
  var stateArea_CMR = region.area();
  var stateAreaSqKm_CMR = ee.Number(stateArea_CMR).divide(1e6).round();
  print(text, stateAreaSqKm_CMR, unit);
  return null;
};

// Todo description
// Inputs: classifiedImage (Object of type image that was classified using an algorithm), region (geometry of region)
// Output:
// Return:
exports.calculateAreaOfClasses = function (classifiedImage, CONFIG, groupName) {
  // https://spatialthoughts.com/2020/06/19/calculating-area-gee/

  // Convert the pixels to m^2 and add bands of the classified image (give each pixel the unit of square metres)
  var areaImage = ee.Image.pixelArea().addBands(classifiedImage);

  // define group(s) to be calulated / which field contains the record
  var group = {
    groupField: 1,
    groupName: groupName, // e.g. 'class_20'
  };

  // Reduce all pixels to a statistic and sum it in each group
  // image.reduceRegion(): reduce all pixels in a region to a class to which they belong
  // ee.Reducer.sum(): sums up the pixel values in the respective groups
  var areas = areaImage.reduceRegion({
    reducer: ee.Reducer.sum().group(group),
    geometry: CONFIG.REGION,
    scale: CONFIG.COLLECTION_SCALE,
    maxPixels: 1e10, // The maximum number of pixels that the image could contain
  });

  // Make a list with reduced group and get the 'groups'
  var classAreas = ee.List(areas.get("groups"));

  // Map over a function to extract individual class area
  var classAreaLists = classAreas.map(function (item) {
    var areaDict = ee.Dictionary(item);
    var classNumber = ee.Number(areaDict.get(groupName)).format();
    var area = ee.Number(areaDict.get("sum")).divide(1e6).round();
    return ee.Dictionary({ classNumber: classNumber, area: area });
  });

  return classAreaLists;
  /*
  //Print the list to show the results 
  print("Area of classes of group " + groupName, classAreaLists);
  */
};
