/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var adminlevel2 = ee.FeatureCollection("projects/ee-swisstph-cabodelgado/assets/Mozambique_Adminlevel_2"),
    pemba_metuge = ee.FeatureCollection("projects/ee-swisstph-cabodelgado/assets/Pemba-Metuge");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// get region geometry
exports.getRegion = function (code, scale, name) {
  if (!code) {
    code = "MZ0104"; // standard code for Pemba
  }
  if (!scale) {
    scale = 12; // default scale
  }
  if (!name) {
    name = "Cidade De Pemba"; // default name of map
  }
  var ROI = adminlevel2
    .filter(ee.Filter.eq("ADM2_PCODE", code))
    .first()
    .geometry();
  Map.centerObject(ROI, scale);
  Map.addLayer(ROI, { palette: ["black"] }, name, false);
  return ROI;
};

// get multiplie region geometries (instead of just one)
exports.getRegions = function (list, scale, name, column, DEACTIVATE_MAP_DRAWING) {
  // first, set some default values...
  if (!list) {
    // list of region codes as defined in the dataset
    list = ee.List(["MZ0104", "MZ0109"]); // pemba and metuge as default regions...
  }
  list = ee.List(list); // convert to list if not cast before
  if (!scale) {
    scale = 12; // default scale
  }
  if (!name) {
    name = "Cidade De Pemba and Metuge"; // default name of map
  }
  if (!column) {
    column = "ADM2_PCODE"; // column in table to be filtered on
  }

  // get geometries of the regions
  var ROI = adminlevel2.filter(ee.Filter.inList(column, list)).geometry();

  // plot them
  Map.centerObject(ROI, scale);
  Map.addLayer(ROI, { palette: ["black"] }, name, !DEACTIVATE_MAP_DRAWING && true);

  // return region
  return ROI;
};
