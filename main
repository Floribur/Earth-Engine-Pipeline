/* ////////////////////////////////////////////////////
// Import Script Modules
// USER SHOULD NOT CHANGE THESE
*/ ////////////////////////////////////////////////////
var helper = require("users/florianburkhardt/caboDelgado:helperFunctions");
var changeDetector = require("users/florianburkhardt/caboDelgado:changeDetector");
var compositeCreator = require("users/florianburkhardt/caboDelgado:compositeCreator");
var areaCalculator = require("users/florianburkhardt/caboDelgado:areaCalculator");
var params = require("users/florianburkhardt/caboDelgado:params");
var legend = require("users/florianburkhardt/caboDelgado:legend");
var region = require("users/florianburkhardt/caboDelgado:region");

// TODO: Change "number of bands" function for legend and filenaming for Sentinel case
// What: landsat bands = 19 at start. How many sentinels are there? Difference between these two!

/*
// Export an ee.FeatureCollection as an Earth Engine asset.
Export.table.toAsset({
  collection: Pemba_Metuge_Waterbodies_2018, // variable of collection
  assetId: 'pembaMetuge_GEE_2018_Waterbodies', // id (used to import, unique identifier)
});
Export.table.toAsset({
  collection: Pemba_Metuge_Urban_2018, // variable of collection
  assetId: 'pembaMetuge_GEE_2018_Urban', // id (used to import, unique identifier)
});
Export.table.toAsset({
  collection: Pemba_Metuge_NaturalVegetation_2018, // variable of collection
  assetId: 'pembaMetuge_GEE_2018_NaturalVegetation', // id (used to import, unique identifier)
});
Export.table.toAsset({
  collection: Pemba_Metuge_BareSoils_2018, // variable of collection
  assetId: 'pembaMetuge_GEE_2018_BareSoils', // id (used to import, unique identifier)
});
Export.table.toAsset({
  collection: Pemba_Metuge_Agriculture_2018, // variable of collection
  assetId: 'pembaMetuge_GEE_2018_Agriculture', // id (used to import, unique identifier)
});
Export.table.toAsset({
  collection: Pemba_Metuge_Grassland_2018, // variable of collection
  assetId: 'pembaMetuge_GEE_2018_Grassland', // id (used to import, unique identifier)
});
*/

/* ////////////////////////////////////////////////////
// GLOBAL SETTINGS
// USER CAN / SHOULD CHANGE THESE
*/ ////////////////////////////////////////////////////

// These are the texture combinations as defined by Mananze
// These are lists for each combination t1 - t4
// Other combinations could be added
var GLCM_BAND_COMBINATION = {
  T1: [
    "ASM",
    "CONTRAST",
    "CORR",
    "VAR",
    "IDM",
    "SAVG",
    "SVAR",
    "SENT",
    "ENT",
    "DVAR",
    "DENT",
    "IMCORR1",
    "IMCORR2",
    "MAXCORR",
    "DISS",
    "INERTIA",
    "SHADE",
    "PROM",
  ],
  T2: ["ASM", "ENT", "INERTIA", "SHADE", "PROM"],
  T3: ["CONTRAST", "CORR", "VAR", "SAVG", "DISS"],
  T4: ["ASM", "CONTRAST", "VAR", "CORR", "ENT", "IDM"],
};

// These are the scales of the satelite images, see https://developers.google.com/earth-engine/guides/scale for more information
// Scale of the satelite images
var COLLECTION_SCALE = {
  LANDSAT: 30, // 30x30m image (mostly)
  SENTINEL: 10, // 10x10m image (mostly)
};

// Define Bands that are used to calculate the pearson correlation between each other
// Since the bands have different names, they have to be defined separatly for Landsat or Sentinel Analysis
var PEARSON_CORRELEATION_BANDS = {
  LANDSAT: [
    "SR_B1",
    "SR_B2",
    "SR_B3",
    "SR_B4",
    "SR_B5",
    "SR_B6",
    "SR_B7",
    "ST_B10",
  ],
  SENTINEL: [
    "B1",
    "B2",
    "B3",
    "B4",
    "B5",
    "B6",
    "B7",
    "B8",
    "B9",
    "B11",
    "B12",
  ],
};

// These are the bands that are used as a base to calculate their GLCM bands
// These  are usually the result of the pearson correlation analysis (e.g. top 3 bands that are lowest correlated to each other)
var GLCM_RELEVANT_BANDS = {
  LANDSAT: ["SR_B1", "SR_B5", "SR_B6"], // Relevant bands are Band 1—deep blue; Band 5—NIR; Band 6—SWIR1 (Mananze)
  SENTINEL: ["B1", "B8", "B12"],
};

// this lists contains all the bands, that are removed from the final image composition
// and not used for training and classifying
var BANDS_TO_BE_REMOVED = {
  LANDSAT: [
    // 'SR_B1', // used in GLCM Calculation. Should be a feature
    "SR_B2",
    "SR_B3",
    "SR_B4",
    //'SR_B5', // used in GLCM Calculation. Should be a feature
    //'SR_B6', // used in GLCM Calculation. Should be a feature
    "SR_B7",
    "ST_B10", // has to be removed. Has masked areas.
    "SR_QA_AEROSOL",
    "ST_ATRAN",
    "ST_CDIST",
    "ST_DRAD",
    "ST_EMIS", // has to be removed. Has masked areas.
    "ST_EMSD", // has to be removed. Has masked areas.
    "ST_QA", // has to be removed. Has masked areas.
    "ST_TRAD", // has to be removed. Has masked areas.
    "ST_URAD", // has to be removed. Has masked areas.
    "QA_PIXEL",
    "QA_RADSAT",
  ],
  SENTINEL: [
    // 'B1',  // used in GLCM Calculation. Should be a feature
    "B2",
    "B3",
    "B4",
    "B5",
    "B6",
    "B7",
    //'B8', // used in GLCM Calculation. Should be a feature
    "B8A",
    "B9",
    "B11",
    //'B12', // used in GLCM Calculation. Should be a feature
    "AOT",
    "WVP",
    "SCL",
    "TCI_R",
    "TCI_G",
    "TCI_B",
    "MSK_CLDPRB",
    "MSK_SNWPRB",
    "QA10",
    "QA20",
    "QA60",
  ],
};

// This is the heart of the config and can be adjusted as you like it
// Every parameter is explained to its right.
// The notation X|Y|Z means that one of the values X, Y or Z should be inserted at that position.
// Don't delete parameters or set them to null if null is not one of the values described
var CONFIG = {
  // REGION OF INTEREST
  REGION_NAME: "Pemba-Metuge", // Name of the region
  REGION_LIST: ee.List(["MZ0104", "MZ0109"]), // Codes of the regions to be included. Has to be of type ee.List()
  REGION_LIST_COLUMN: "ADM2_PCODE", // The column in which to search for the REGION_LIST parameter. Standard: ADM2_PCODE
  REGION_SCALE: 11, // Scale of Map by default
  MAX_CLOUD_COVERAGE: 30, // int (percentage) of cloud coverage of region
  REGION: null, // Should be null, since it's set later automatically. (Region as type of geometry, based on input above).

  // IMAGE COLLECTION
  COLLECTION: "LANDSAT", // "LANDSAT" | "SENTINEL", whether to run the analysis using Landsat or Sentinel
  COLLECTION_SCALE: null, // leave null, will be calculated based on COLLECTION (Sentinel or Landsat)
  IS_SENTINEL: null, // leave null, will be calculated based on COLLECTION (Sentinel or Landsat). Result: true|false

  // STATISTICAL ANALYSIS
  MAKE_SEPERABILITY_ANALYSIS: true, // true|false, whether to run seperability analysis (JM-Distance)
  RUN_PEARSON_CORRELATION: false, // true|false, whether to run pearson correlation on bands
  PEARSON_CORRELEATION_BANDS: null, // leave null, will be calculated based on COLLECTION (Sentinel or Landsat)

  // Note: Computation usually times out when setting the following to true
  JM_DISTANCE_MANANZE: false, // true|false, true = using Emma Izquierdo-Verdiguier script (like Mananze) to calculate JM distance. False = using stackoverflow JM Distance calcualtor (much faster).

  // CLASSIFICATION
  MAKE_CLASSIFICATION: false, // true|false, whether to run the classification
  CLASSIFIERTYPE: "RF", // CART|SVM|RF, RF=default, which algorithm to run for the classification
  RANDOM_FOREST_TREES: 500, // number of trees to use for the random forest. Mamanze used 500
  FEATURE_COLLECTION_SPLIT: 0.7, // float between 0 and 1. A value of 0.7 means 70% will be training data, 30% validation data
  CLASSIFICATION_LABEL: "Landcover", // the label used for each class in the feature collection dataset
  FEATURE_COLLECTION_LIMIT: 50000, // Limit number of polygons per collection to this number (rarely used, should be high enough)

  // FEATURE SETTINGS
  VEGETATION_INDEXES: true, // true|false, whether to calculate and add the 4 vegetation indexes
  GLCM: true, // true|false, whether to add the GLCM bands
  GLCM_WINDOW_SIZE: 20, // integer > 0, normally 2,5,10,20,25,30. The size of the GLCM window
  GLCM_COMBINATION: "T2", // T1|T2|T3|T4, chose which texture combination to use, see GLCM_BAND_COMBINATION
  GLCM_BANDS_FILTER: null, // leave null, will be automatically calculated based on GLCM_COMBINATION
  GLCM_RELEVANT_BANDS: null, // leave null, will be automatically calculated based on the COLLECTION (Sentinel or Landsat)
  BANDS_TO_BE_REMOVED: null, // leave null, will automatically be calculated based on the COLLECTION (Sentinel or Landsat)

  // LOGGER SETTINGS (print to console)
  DRAW_TRAINING_SAMPLES: true, // true|false, whether to show the training polygons on the map
  SHOW_ACCUARCY: true, // true|false, wheteher to print the classification accuary to the console
  SHOW_REBSTITUTION_MATRIX: true, // true|false, whether to print the classification rebstitution matrix to the console
  EXPLAIN_CLASSIFIER: true, // true|false, whether to print the explaination of the trained classifier to the console
  CREATE_BAR_CHART: true, // true|false, whteher to draw the bar chart
  BAR_CHART_TYPE: "EXPORT", // CONSOLE|EXPORT draw bar chart to console or export it to google drive
  SHOW_CLASS_INDIVIDUALLY: true, // true|false, whether to add each classified class as an individual layer to the map
  DEACTIVATE_MAP_DRAWING: true, // true|false. Show or hide results on map (e.g. classification etc.) [note: this only hides all the layers. Users can still activate them later]
  SHOW_LEGENDS: false, // true|false. Show legends on the Map for classes and settings
  SHOW_NUMBER_OF_POLYGONS: true, // true|false. Whether to print the number of polygons and pixels to the console [TODO]
};

/* ////////////////////////////////////////////////////
// CALCULATIONS TO ADD VALUES BASED ON INPUTS FROM ABOVE
// USER SHOULD NOT CHANGE THESE
*/ ////////////////////////////////////////////////////

// VALUES BASED ON LANDSAT OR SENTINEL
CONFIG.COLLECTION_SCALE = COLLECTION_SCALE[CONFIG.COLLECTION]; // set scale based on LANDSAT or SENTINEL
CONFIG.GLCM_RELEVANT_BANDS = GLCM_RELEVANT_BANDS[CONFIG.COLLECTION]; // set bands based on LANDSAT or SENTINEL
CONFIG.BANDS_TO_BE_REMOVED = BANDS_TO_BE_REMOVED[CONFIG.COLLECTION]; // set bands based on LANDSAT or SENTINEL
CONFIG.PEARSON_CORRELEATION_BANDS =
  PEARSON_CORRELEATION_BANDS[CONFIG.COLLECTION]; // set bands LANDSAT or SENTINEL
CONFIG.IS_SENTINEL = CONFIG.COLLECTION === "SENTINEL"; // set boolean true if collection is sentinel

// based on GLCM_COMBINATION, get texture bands based on choice
CONFIG.GLCM_BANDS_FILTER = GLCM_BAND_COMBINATION[CONFIG.GLCM_COMBINATION];

/* ////////////////////////////////////////////////////
// GET REGION OF INTEREST, MAP IT, ADD IT TO CONFIG
// USER SHOULD NOT CHANGE THESE
*/ ////////////////////////////////////////////////////

var ROI = region.getRegions(
  CONFIG.REGION_LIST,
  CONFIG.REGION_SCALE,
  CONFIG.REGION_NAME,
  CONFIG.REGION_LIST_COLUMN,
  CONFIG.DEACTIVATE_MAP_DRAWING
);

CONFIG.REGION = ROI; // add region to config

//Calculate area size of the entire region
//areaCalculator.calculateAreaOfRegion(region, "Size of " + config.regionName + " according to the clipped region.")

/* ////////////////////////////////////////////////////
// Create image composites based on settings
// USER CAN / SHOULD CHANGE THESE
*/ ////////////////////////////////////////////////////

// List of years for which to run this analysis
// Note that for each of these years training data should be available in the file "featureCollections"!
var years = [2020]; // be cautious with that. Multiple images => more computation!
var imageComposites = {};
// run analysis for all these years
for (var k = 0; k < years.length; k++) {
  var year = years[k];
  imageComposites[year] = compositeCreator.run(CONFIG, year);
}
print("The image composites, areas, classified images etc.", imageComposites);

// This function can used to calculate the JM distnace for all possible window sizes and vegetation indexes combinations
// The T1/T2 etc. combinations still have to be set separately
var MultipleJMDistanceCalcualtor = function () {
  //var windowSizes = [2, 5, 10, 20, 25, 30]; // sizes to iterate over
  //var vegetationIndexes = [true, false]; // options for vegetaion indexes
  var windowSizes = [20];
  var vegetationIndexes = [true];
  var year = 2020;
  for (var q = 0; q < windowSizes.length; q++) {
    // for all window sizes
    for (var v = 0; v < vegetationIndexes.length; v++) {
      // for all vegetation index options
      var conf = CONFIG; // new adjusted config for each case
      conf.MAKE_CLASSIFICATION = false; // deactive classification
      conf.RUN_PEARSON_CORRELATION = false; // deactive pearson correlation calculator
      conf.MAKE_SEPERABILITY_ANALYSIS = true; // activate JM Distance calculator
      conf.GLCM_WINDOW_SIZE = windowSizes[q]; // set new window size
      conf.VEGETATION_INDEXES = vegetationIndexes[v]; // set vegetationindex option
      //console.log("Config für iteration", q,v, conf); // print config to console...
      compositeCreator.run(conf, year); // run analysis
    }
  }
};

//MultipleJMDistanceCalcualtor();

/* ////////////////////////////////////////////////////
// CHANGE DETECTION
*/ ////////////////////////////////////////////////////

/*
// detect the change and show it on the map (gain map and loss map)
//changeDetector.detectChangeAndMap(classifiedImage1, classifiedImage2, 1, gainTitle, lossTitle, 'blue', 'red', 'green')
var change2015To2019 = changeDetector.detectChangeAndMap(
  imageComposite2015.classifiedImage,
  imageComposite2019.classifiedImage,
  0, // the classification categry. e.g., waterbodies = 0, etc.
  CONFIG
  )
  
  print("Change 2015 to 2019 of class 0", change2015To2019)
  
  var gainColor = 'green';
  var lossColor = 'red';
  var noChangeColor = 'gray';
  
  Map.addLayer(change2015To2019.gainImage,{min:0, max:1, palette: [gainColor, noChangeColor]}, 'Gain of class 0 from 2015 to 2019');
  Map.addLayer(change2015To2019.lossImage,{min:0, max:1, palette: [lossColor, noChangeColor]}, 'Loss of class 0 from 2015 to 2019');
  */

/* ////////////////////////////////////////////////////
// EXPORT 
*/ ////////////////////////////////////////////////////

// TODO

/* ////////////////////////////////////////////////////
// SHOW LEGEND 
*/ ////////////////////////////////////////////////////

if (CONFIG.SHOW_LEGENDS) {
  Map.add(legend.classes);
  legend.showConfig(CONFIG);
}
