// Imports
var params = require("users/florianburkhardt/caboDelgado:helper/params");

/* ////////////////////////////////////////////////////
// CLASSIFICATION
// scripts to classify images based on training data
*/ ////////////////////////////////////////////////////

/*
  Function to create training data based on parameters
  image: of type ee.image, image to be used for training
  trainingPointsCollection: merged feature collection
  config: global CONFIG from main
  returns: trainingData of type ee.FeatureCollection
*/
exports.createTrainingData = function (
  image,
  trainingPointsCollection,
  CONFIG
) {
  // overlay the polygons from the training collection over the pixel values of an image
  // --> get pixel data below the polygons using sampleRegions
  var trainingData = image.sampleRegions({
    collection: trainingPointsCollection,
    properties: [CONFIG.CLASSIFICATION_LABEL],
    scale: CONFIG.COLLECTION_SCALE,
    tileScale: 16,
  });
  return trainingData;
};

/*
  Function to train classifier with the trainingdata on a specific property
  classifier: of Type ee.Classifier
  trainingData: of type ee.FeatureCollection. Result of sampleRegions Function
  property: property used for the classes in the feauture collection (e.g. 'LC_20' for landcover in 2020) 
  image: of type ee.Image, used to get the bands on which to train the classifier
  returns: ee.Classifier (trained)
*/

exports.trainClassifier = function (classifier, trainingData, property, image) {
  var trainedClassifier = classifier.train({
    features: trainingData,
    classProperty: property, // the property to be trained on, e.g. 'LC_20'
    inputProperties: image.bandNames(), // [inputProperty] //
  });
  return trainedClassifier;
};

/*
  Function to create an Error Matrix
*/
var createMatrix = function (data, CONFIG) {
  var trainAccuracy = data.errorMatrix(
    CONFIG.CLASSIFICATION_LABEL,
    "classification"
  );
  // classificationLabel = "landcover", actual class based on validation data [property to look at]
  // "classification" => actual proposed classification based on the classifier
  if (CONFIG.SHOW_REBSTITUTION_MATRIX) {
    print("Resubstitution error matrix: ", trainAccuracy);
  }
  if (CONFIG.SHOW_ACCUARCY) {
    print("Training overall accuracy: ", trainAccuracy.accuracy());
  }
};

/*
  Function to test classifier on validation data set.
  State: classifier is trained, but before using it on the entire image, we use it on the validation data set first.
  We classify the pixels of the validation set
  and then print an error matrix showing how good the classifier is on unknown data
*/
exports.createValidationErrorMatrix = function (
  validationCollection,
  trainedClassifier,
  CONFIG
) {
  var classifiedValidationData =
    validationCollection.classify(trainedClassifier); // Classifies the validation data
  createMatrix(classifiedValidationData, CONFIG); // Print the error matrix
};

/*
  Function to create the classified image from the image and the trained classifier (output of traingClassifier function)
  image: of type ee.Image
  trainedClassifier: ee.Classifier (trained)
  returns: generated classified image
*/
exports.createClassifiedImage = function (image, trainedClassifier) {
  var classifiedImage = image.classify(trainedClassifier);
  return classifiedImage;
};

/*
  Calculate the accuracy of the classification using the confusion matrix
  There are also other functions that can be called up under confusionMatrix, like the Error Matrix,
*/
exports.createConfusionMatrixAndPrintAccuracy = function (trainedClassifier) {
  var trainAccuracy = trainedClassifier.confusionMatrix();
  //print('Training overall accuracy: ', trainAccuracy.accuracy());
  print("RF error matrix: ", trainAccuracy);
  print("RF accuracy: ", trainAccuracy.accuracy());
  return trainAccuracy;
};

/*
  Inspired by https://dges.carleton.ca/CUOSGwiki/index.php/Supervised_Classifications_using_Google_Earth_Engine
  prints a chart of Landcover by area of each class
*/
exports.classificationChart = function (classifiedImage, classList, CONFIG) {
  // for classList, create a list of your classes as strings
  // see https://developers.google.com/earth-engine/guides/charts_style
  var options = {
    hAxis: { title: "Class" },
    vAxis: { title: "Area in km^2" },
    title: "Area by class",
    colors: params.classPalette,
    /*series: {
      // You can change these to be whatever colours you'd like.
      // Simply add numbers to match how many classes you have
      0: { color: params.classPalette[0] },
      1: { color: params.classPalette[1] },
      2: { color: params.classPalette[2] },
      3: { color: params.classPalette[3] },
      4: { color: params.classPalette[4] },
      5: { color: params.classPalette[5] },
    },*/
  };

  if (CONFIG.CREATE_BAR_CHART) {
    // create chart based on config
    var chartScale = 300; // rough analysis when just printing to the console
    var areaChart = ui.Chart.image
      .byClass({
        image: ee.Image.pixelArea()
          .multiply(1e-6) // pixel area in km2
          .addBands(classifiedImage),
        classBand: "classification",
        scale: chartScale,
        region: CONFIG.REGION,
        reducer: ee.Reducer.sum(), // sum up all areas to one value per class
        classLabels: classList, // list of labels for each class
      })
      //.setSeriesNames(classList)
      .setOptions(options);
    //.setChartType('ColumnChart')

    print(
      'Attention: scale not "correct" since computation would run out. Export for detailed analysis.',
      areaChart
    );
  }
};
